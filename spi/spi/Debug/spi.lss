
spi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000216  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f56  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008de  00000000  00000000  00001266  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e4  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00002028  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c6  00000000  00000000  0000207c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002db  00000000  00000000  00002542  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000281d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	11 d0       	rcall	.+34     	; 0xbc <main>
  9a:	bb c0       	rjmp	.+374    	; 0x212 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <_Z15SPI_master_initv>:
{
	
	SPDR = 0xFF;
	while(!(SPSR & (1<<SPIF)));  // wait until data is received
	return(SPDR);
}
  9e:	8e e7       	ldi	r24, 0x7E	; 126
  a0:	8d b9       	out	0x0d, r24	; 13
  a2:	70 9a       	sbi	0x0e, 0	; 14
  a4:	08 95       	ret

000000a6 <_Z9SPI_writeh>:
  a6:	8f b9       	out	0x0f, r24	; 15
  a8:	77 9b       	sbis	0x0e, 7	; 14
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <_Z9SPI_writeh+0x2>
  ac:	8b e4       	ldi	r24, 0x4B	; 75
  ae:	9d e1       	ldi	r25, 0x1D	; 29
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <_Z9SPI_writeh+0xa>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <_Z9SPI_writeh+0x10>
  b6:	00 00       	nop
  b8:	8f b1       	in	r24, 0x0f	; 15
  ba:	08 95       	ret

000000bc <main>:
  int data0,data1,data2,data3,data4,data5,a,b,c,d=0;
  int cir_rx,cir_ry,cir_lx,cir_ly;
  int x,y,z;
  
  // do the initialistion of the ports according to the use
  PORTB = 0x00;
  bc:	18 ba       	out	0x18, r1	; 24
  DDRB = 0x0D;
  be:	8d e0       	ldi	r24, 0x0D	; 13
  c0:	87 bb       	out	0x17, r24	; 23
  SPI_master_init();
  c2:	ed df       	rcall	.-38     	; 0x9e <_Z15SPI_master_initv>
  while(d!= 0x73)
  {
	   PORTB|=(1<<PINB2)|(1<<PINB1); //set
  c4:	88 b3       	in	r24, 0x18	; 24
  c6:	86 60       	ori	r24, 0x06	; 6
  c8:	88 bb       	out	0x18, r24	; 24
	   PORTB&=~(1<<PINB0); //clr   // slave select setting to low
  ca:	c0 98       	cbi	0x18, 0	; 24
	   
	   
	   SPI_write(0x01); //entering config mode
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	eb df       	rcall	.-42     	; 0xa6 <_Z9SPI_writeh>
	   SPI_write(0x43);
  d0:	83 e4       	ldi	r24, 0x43	; 67
  d2:	e9 df       	rcall	.-46     	; 0xa6 <_Z9SPI_writeh>
	   SPI_write(0x00);
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	e7 df       	rcall	.-50     	; 0xa6 <_Z9SPI_writeh>
	   SPI_write(0x01);
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	e5 df       	rcall	.-54     	; 0xa6 <_Z9SPI_writeh>
  dc:	80 e0       	ldi	r24, 0x00	; 0
	   SPI_write(0x00);
  de:	e3 df       	rcall	.-58     	; 0xa6 <_Z9SPI_writeh>
  e0:	c2 9a       	sbi	0x18, 2	; 24
  e2:	89 ef       	ldi	r24, 0xF9	; 249
	   
	   PORTB|=(1<<PINB2);
  e4:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x2a>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x30>
  ec:	00 00       	nop
  ee:	c0 9a       	sbi	0x18, 0	; 24
  f0:	83 ec       	ldi	r24, 0xC3	; 195
	   _delay_ms(1);
	   PORTB|=(1<<PINB0);
  f2:	99 e0       	ldi	r25, 0x09	; 9
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x38>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x3e>
  fa:	00 00       	nop
  fc:	88 b3       	in	r24, 0x18	; 24

	   _delay_ms(10);

	   
	   PORTB|=(1<<PINB2)|(1<<PINB1); //setting
  fe:	86 60       	ori	r24, 0x06	; 6
 100:	88 bb       	out	0x18, r24	; 24
	   
	   PORTB&=~(1<<PINB0); // clearing

	   SPI_write(0x01); //seting analog mode
 102:	c0 98       	cbi	0x18, 0	; 24
 104:	81 e0       	ldi	r24, 0x01	; 1
	   SPI_write(0x44);
 106:	cf df       	rcall	.-98     	; 0xa6 <_Z9SPI_writeh>
 108:	84 e4       	ldi	r24, 0x44	; 68
	   SPI_write(0x00);
 10a:	cd df       	rcall	.-102    	; 0xa6 <_Z9SPI_writeh>
 10c:	80 e0       	ldi	r24, 0x00	; 0
	   SPI_write(0x01);   // 0x01 for analog and 0x00 for digital mode
 10e:	cb df       	rcall	.-106    	; 0xa6 <_Z9SPI_writeh>
 110:	81 e0       	ldi	r24, 0x01	; 1
	   SPI_write(0x03);   // controller mode is locked
 112:	c9 df       	rcall	.-110    	; 0xa6 <_Z9SPI_writeh>
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	c7 df       	rcall	.-114    	; 0xa6 <_Z9SPI_writeh>
	   SPI_write(0x00);
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	c5 df       	rcall	.-118    	; 0xa6 <_Z9SPI_writeh>
 11c:	80 e0       	ldi	r24, 0x00	; 0
	   SPI_write(0x00);
 11e:	c3 df       	rcall	.-122    	; 0xa6 <_Z9SPI_writeh>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	c1 df       	rcall	.-126    	; 0xa6 <_Z9SPI_writeh>
	   SPI_write(0x00);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	bf df       	rcall	.-130    	; 0xa6 <_Z9SPI_writeh>
 128:	c2 9a       	sbi	0x18, 2	; 24
	   SPI_write(0x00);
 12a:	89 ef       	ldi	r24, 0xF9	; 249
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	01 97       	sbiw	r24, 0x01	; 1

	   PORTB|=(1<<PINB2);
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0x72>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x78>
 134:	00 00       	nop
 136:	c0 9a       	sbi	0x18, 0	; 24
 138:	83 ec       	ldi	r24, 0xC3	; 195
 13a:	99 e0       	ldi	r25, 0x09	; 9
	   _delay_ms(1);
	   PORTB|=(1<<PINB0);
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x80>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x86>
 142:	00 00       	nop
 144:	88 b3       	in	r24, 0x18	; 24

	   _delay_ms(10);

	   
	   PORTB|=(1<<PINB2)|(1<<PINB1);
 146:	86 60       	ori	r24, 0x06	; 6
 148:	88 bb       	out	0x18, r24	; 24
	   PORTB&=~(1<<PINB0);
 14a:	c0 98       	cbi	0x18, 0	; 24

	   SPI_write(0x01);/*was using this to poll.The code will work fine even without this*/
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	ab df       	rcall	.-170    	; 0xa6 <_Z9SPI_writeh>
	   SPI_write(0x43);
 150:	83 e4       	ldi	r24, 0x43	; 67
 152:	a9 df       	rcall	.-174    	; 0xa6 <_Z9SPI_writeh>
 154:	80 e0       	ldi	r24, 0x00	; 0
	   SPI_write(0x00);
 156:	a7 df       	rcall	.-178    	; 0xa6 <_Z9SPI_writeh>
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	a5 df       	rcall	.-182    	; 0xa6 <_Z9SPI_writeh>
	   SPI_write(0x00);
 15c:	8a e5       	ldi	r24, 0x5A	; 90
 15e:	a3 df       	rcall	.-186    	; 0xa6 <_Z9SPI_writeh>
 160:	8a e5       	ldi	r24, 0x5A	; 90
	   SPI_write(0x5A);
 162:	a1 df       	rcall	.-190    	; 0xa6 <_Z9SPI_writeh>
 164:	8a e5       	ldi	r24, 0x5A	; 90
 166:	9f df       	rcall	.-194    	; 0xa6 <_Z9SPI_writeh>
	   SPI_write(0x5A);
 168:	8a e5       	ldi	r24, 0x5A	; 90
 16a:	9d df       	rcall	.-198    	; 0xa6 <_Z9SPI_writeh>
 16c:	8a e5       	ldi	r24, 0x5A	; 90
	   SPI_write(0x5A);
 16e:	9b df       	rcall	.-202    	; 0xa6 <_Z9SPI_writeh>
 170:	c2 9a       	sbi	0x18, 2	; 24
 172:	89 ef       	ldi	r24, 0xF9	; 249
	   SPI_write(0x5A);
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	01 97       	sbiw	r24, 0x01	; 1
	   SPI_write(0x5A);
 178:	f1 f7       	brne	.-4      	; 0x176 <main+0xba>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0xc0>
 17c:	00 00       	nop
 17e:	c0 9a       	sbi	0x18, 0	; 24
 180:	83 ec       	ldi	r24, 0xC3	; 195
 182:	99 e0       	ldi	r25, 0x09	; 9

	   PORTB|=(1<<PINB2);
	   _delay_ms(1);
	   PORTB|=(1<<PINB0);
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0xc8>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0xce>
 18a:	00 00       	nop
 18c:	88 b3       	in	r24, 0x18	; 24
	   _delay_ms(10);


	   
	   
	   PORTB|=(1<<PINB2)|(1<<PINB1);
 18e:	86 60       	ori	r24, 0x06	; 6
 190:	88 bb       	out	0x18, r24	; 24
 192:	c0 98       	cbi	0x18, 0	; 24
	   PORTB&=~(1<<PINB0);
 194:	81 e0       	ldi	r24, 0x01	; 1
	    SPI_write(0x01);
 196:	87 df       	rcall	.-242    	; 0xa6 <_Z9SPI_writeh>
 198:	82 e4       	ldi	r24, 0x42	; 66
 19a:	85 df       	rcall	.-246    	; 0xa6 <_Z9SPI_writeh>
	   d= SPI_write(0x42); //making sure we're in the analog mode the value of d will be 0x73
 19c:	c8 2f       	mov	r28, r24
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	82 df       	rcall	.-252    	; 0xa6 <_Z9SPI_writeh>
 1a2:	80 e0       	ldi	r24, 0x00	; 0
	   SPI_write(0x00);   // if d is not equal to 0x73 this loop will repeat
 1a4:	80 df       	rcall	.-256    	; 0xa6 <_Z9SPI_writeh>
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	7e df       	rcall	.-260    	; 0xa6 <_Z9SPI_writeh>
	   SPI_write(0x00);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	7c df       	rcall	.-264    	; 0xa6 <_Z9SPI_writeh>
 1ae:	80 e0       	ldi	r24, 0x00	; 0
	   SPI_write(0x00);
 1b0:	7a df       	rcall	.-268    	; 0xa6 <_Z9SPI_writeh>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	78 df       	rcall	.-272    	; 0xa6 <_Z9SPI_writeh>
	   SPI_write(0x00);
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	76 df       	rcall	.-276    	; 0xa6 <_Z9SPI_writeh>
	   SPI_write(0x00);
 1ba:	c2 9a       	sbi	0x18, 2	; 24
 1bc:	89 ef       	ldi	r24, 0xF9	; 249
	   SPI_write(0x00);
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	01 97       	sbiw	r24, 0x01	; 1
	   SPI_write(0x00);
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <main+0x104>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x10a>
	   PORTB|=(1<<PINB2);
 1c6:	00 00       	nop
 1c8:	c0 9a       	sbi	0x18, 0	; 24
 1ca:	83 ec       	ldi	r24, 0xC3	; 195
 1cc:	99 e0       	ldi	r25, 0x09	; 9
 1ce:	01 97       	sbiw	r24, 0x01	; 1
	   _delay_ms(1);
	   PORTB|=(1<<PINB0);
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0x112>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0x118>
 1d4:	00 00       	nop
 1d6:	c3 37       	cpi	r28, 0x73	; 115
 1d8:	09 f0       	breq	.+2      	; 0x1dc <main+0x120>
 1da:	74 cf       	rjmp	.-280    	; 0xc4 <main+0x8>
 1dc:	88 b3       	in	r24, 0x18	; 24
  
  // do the initialistion of the ports according to the use
  PORTB = 0x00;
  DDRB = 0x0D;
  SPI_master_init();
  while(d!= 0x73)
 1de:	86 60       	ori	r24, 0x06	; 6
 1e0:	88 bb       	out	0x18, r24	; 24
 1e2:	c0 98       	cbi	0x18, 0	; 24
      while(d==0x73)
      {
	      while (1)
	      {
		      
		      PORTB|=(1<<PINB2) | (1<<PINB1);
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	5f df       	rcall	.-322    	; 0xa6 <_Z9SPI_writeh>
 1e8:	82 e4       	ldi	r24, 0x42	; 66
		      PORTB&=~(1<<PINB0);
 1ea:	5d df       	rcall	.-326    	; 0xa6 <_Z9SPI_writeh>
		      a=SPI_write(0x01);
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	5b df       	rcall	.-330    	; 0xa6 <_Z9SPI_writeh>
 1f0:	80 e0       	ldi	r24, 0x00	; 0
		      b=SPI_write(0x42);
 1f2:	59 df       	rcall	.-334    	; 0xa6 <_Z9SPI_writeh>
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	57 df       	rcall	.-338    	; 0xa6 <_Z9SPI_writeh>
		      c=SPI_write(0x00);
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	55 df       	rcall	.-342    	; 0xa6 <_Z9SPI_writeh>
 1fc:	80 e0       	ldi	r24, 0x00	; 0
		      

		      data0 = SPI_write(0x00); //buttons set 1 8
 1fe:	53 df       	rcall	.-346    	; 0xa6 <_Z9SPI_writeh>
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	51 df       	rcall	.-350    	; 0xa6 <_Z9SPI_writeh>
		      data1 = SPI_write(0x00); //button set 2  8
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	4f df       	rcall	.-354    	; 0xa6 <_Z9SPI_writeh>
 208:	00 00       	nop
		      data2 = SPI_write(0x00); //  rx
 20a:	c2 9a       	sbi	0x18, 2	; 24
 20c:	00 00       	nop
 20e:	c0 9a       	sbi	0x18, 0	; 24
		      data3 = SPI_write(0x00); //  ry
 210:	e5 cf       	rjmp	.-54     	; 0x1dc <main+0x120>

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
